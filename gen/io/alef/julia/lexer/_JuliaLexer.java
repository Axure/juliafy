/* The following code was generated by JFlex 1.4.3 on 4/7/15 11:05 PM */

package io.alef.julia.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static io.alef.julia.psi.JuliaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/7/15 11:05 PM from the specification file
 * <tt>/Users/snefru/repository/juliafy/gen/io/alef/julia/lexer/_JuliaLexer.flex</tt>
 */
public class _JuliaLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\3\1\1\1\1\22\0\1\1\1\74\1\60"+
    "\1\61\1\53\1\76\1\51\1\56\1\102\1\102\1\75\1\64\1\107"+
    "\1\72\1\63\1\76\1\46\1\47\1\71\1\70\2\66\1\67\1\66"+
    "\2\62\1\100\1\110\1\55\1\73\1\54\1\77\1\101\3\104\1\36"+
    "\1\43\1\104\2\106\1\41\4\106\1\45\1\34\2\106\1\35\1\40"+
    "\1\106\1\103\1\44\1\33\1\65\1\106\1\42\1\102\1\57\1\102"+
    "\1\76\1\37\1\0\1\22\1\4\1\24\1\31\1\5\1\14\1\6"+
    "\1\12\1\7\1\106\1\23\1\13\1\25\1\10\1\15\1\30\1\26"+
    "\1\16\1\27\1\17\1\21\1\105\1\11\1\32\1\20\1\106\1\102"+
    "\1\52\1\102\1\50\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\24\4\2\5\4\6\2\7"+
    "\1\1\1\10\1\1\1\11\1\12\2\10\1\13\1\12"+
    "\1\1\1\12\1\14\1\15\2\4\1\16\1\17\4\4"+
    "\2\0\5\4\1\20\11\4\2\0\12\4\1\21\4\4"+
    "\4\0\1\13\1\6\1\7\3\0\1\22\1\23\1\24"+
    "\1\0\1\25\1\0\1\7\1\26\1\4\2\0\4\4"+
    "\1\27\2\0\1\30\11\4\1\31\3\4\1\32\2\0"+
    "\1\33\13\4\1\34\1\4\1\34\1\35\1\36\1\37"+
    "\2\0\1\40\3\0\1\40\2\0\1\4\2\0\4\4"+
    "\1\41\12\4\1\42\1\21\15\4\1\43\5\0\1\23"+
    "\1\0\1\34\1\4\1\44\4\0\1\45\1\4\1\46"+
    "\6\4\1\47\2\4\1\50\2\4\1\51\2\4\1\52"+
    "\1\53\1\54\1\55\1\4\1\34\1\4\3\0\1\56"+
    "\2\0\1\44\1\4\1\57\1\60\2\4\1\61\7\4"+
    "\1\34\2\0\1\62\2\4\1\63\5\4\1\64\2\0"+
    "\1\4\1\65\1\4\1\66\1\67\1\4\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f"+
    "\0\u06d8\0\u0721\0\111\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e"+
    "\0\u08d7\0\u07fc\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d"+
    "\0\u0ad6\0\u07fc\0\111\0\u0b1f\0\111\0\u0b68\0\u0bb1\0\111"+
    "\0\111\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0"+
    "\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0248\0\u0f1d\0\u0f66\0\u0faf"+
    "\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7"+
    "\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f"+
    "\0\u1488\0\u14d1\0\u0248\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e"+
    "\0\u1687\0\u16d0\0\u1719\0\111\0\u1762\0\111\0\u17ab\0\u17f4"+
    "\0\u0920\0\111\0\u183d\0\111\0\u1886\0\111\0\u18cf\0\u0ad6"+
    "\0\111\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u1ace"+
    "\0\111\0\u1b17\0\u1b60\0\u0248\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84"+
    "\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u0248\0\u1e3a\0\u1e83"+
    "\0\u1ecc\0\111\0\u1f15\0\u1f5e\0\u0248\0\u1fa7\0\u1ff0\0\u2039"+
    "\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281"+
    "\0\u22ca\0\u2313\0\u235c\0\u163e\0\u1687\0\u16d0\0\u23a5\0\u23ee"+
    "\0\111\0\u2437\0\u2480\0\u24c9\0\u17ab\0\u2512\0\u255b\0\u25a4"+
    "\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec"+
    "\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34"+
    "\0\u2a7d\0\u0248\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea\0\u2c33"+
    "\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b"+
    "\0\u2ec4\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u3031"+
    "\0\u307a\0\u30c3\0\111\0\u310c\0\u3155\0\u319e\0\u31e7\0\u0248"+
    "\0\u3230\0\u0248\0\u3279\0\u32c2\0\u330b\0\u3354\0\u339d\0\u33e6"+
    "\0\u0248\0\u342f\0\u3478\0\u0248\0\u34c1\0\u350a\0\u0248\0\u3553"+
    "\0\u359c\0\u0248\0\u0248\0\u0248\0\u0248\0\u35e5\0\u0248\0\u362e"+
    "\0\u3677\0\u36c0\0\u3709\0\u0248\0\u3752\0\u379b\0\u31e7\0\u37e4"+
    "\0\u0248\0\u0248\0\u382d\0\u3876\0\u38bf\0\u3908\0\u3951\0\u399a"+
    "\0\u39e3\0\u3a2c\0\u3a75\0\u3abe\0\111\0\u3b07\0\u3b50\0\u0248"+
    "\0\u3b99\0\u3be2\0\u0248\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06\0\u3d4f"+
    "\0\u0248\0\u3d98\0\u3de1\0\u3e2a\0\u0248\0\u3e73\0\u0248\0\u0248"+
    "\0\u3ebc\0\u0248\0\u0248";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\11\1\13\1\14\1\11\1\15\1\16\1\11"+
    "\1\17\1\20\1\11\1\21\1\22\1\23\2\11\1\24"+
    "\1\11\1\25\5\11\1\26\2\11\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\32\1\45\1\46\1\11\4\32"+
    "\1\47\1\50\1\51\1\42\1\52\1\53\1\54\1\53"+
    "\1\55\1\56\1\11\1\57\1\11\1\60\1\61\112\0"+
    "\2\3\1\4\106\0\3\4\111\0\1\11\1\62\1\11"+
    "\1\63\6\11\1\64\3\11\1\65\25\11\6\0\1\66"+
    "\1\0\1\67\1\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\4\11\1\70\2\11\1\71\16\11"+
    "\1\72\15\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\7\11\1\73\34\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\4\11"+
    "\1\74\3\11\1\75\10\11\1\76\22\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\44\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\6\11\1\77\35\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\1\11\1\100\7\11"+
    "\1\101\32\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\3\11\1\102\5\11\1\103\3\11"+
    "\1\104\1\105\25\11\12\0\1\11\2\0\5\11\2\0"+
    "\1\11\6\0\4\11\6\0\1\11\1\106\42\11\6\0"+
    "\1\107\1\0\1\110\1\0\1\11\2\0\5\11\2\0"+
    "\1\11\6\0\4\11\6\0\12\11\1\111\1\11\1\112"+
    "\27\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\23\11\1\113\20\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\1\114\43\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\11\11\1\115\4\11\1\116\1\11\1\117\23\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\11\11\1\120\4\11\1\121\25\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\15\11"+
    "\1\122\26\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\11\11\1\123\32\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\30\11"+
    "\1\124\13\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\4\11\1\125\37\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\37\11"+
    "\1\126\4\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\16\11\1\127\25\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\1\130"+
    "\10\0\1\131\14\0\1\132\13\0\2\32\12\0\1\32"+
    "\1\133\1\0\1\132\4\32\65\0\2\32\12\0\1\32"+
    "\1\133\2\0\4\32\70\0\1\53\21\0\1\134\67\0"+
    "\1\53\131\0\1\134\71\0\1\135\16\0\1\136\72\0"+
    "\1\36\15\0\1\136\15\0\2\137\1\0\54\137\1\140"+
    "\31\137\60\141\1\142\30\141\2\44\1\0\106\44\46\0"+
    "\2\143\7\0\1\144\2\0\1\143\1\145\1\144\1\0"+
    "\4\143\1\144\2\0\1\144\106\0\1\146\56\0\1\147"+
    "\12\0\1\53\16\0\1\134\110\0\1\150\110\0\1\136"+
    "\115\0\1\151\14\0\4\11\1\152\37\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\44\11"+
    "\6\0\1\153\1\0\1\154\1\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\2\11\1\155\41\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\13\11\1\156\30\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\1\11\1\157\42\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\12\11\1\160\31\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\2\0\56\66\1\161\1\162"+
    "\31\66\57\67\1\163\1\161\30\67\4\0\25\11\1\164"+
    "\16\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\23\11\1\165\20\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\24\11\1\166"+
    "\17\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\11\11\1\167\32\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\20\11\1\170"+
    "\23\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\21\11\1\171\2\11\1\172\17\11\12\0"+
    "\1\11\2\0\5\11\2\0\1\11\6\0\4\11\6\0"+
    "\3\11\1\173\40\11\12\0\1\11\2\0\5\11\2\0"+
    "\1\11\6\0\4\11\6\0\13\11\1\123\30\11\12\0"+
    "\1\11\2\0\5\11\2\0\1\11\6\0\4\11\6\0"+
    "\20\11\1\174\23\11\12\0\1\11\2\0\5\11\2\0"+
    "\1\11\6\0\4\11\6\0\4\11\1\175\37\11\12\0"+
    "\1\11\2\0\5\11\2\0\1\11\6\0\4\11\6\0"+
    "\12\11\1\176\31\11\12\0\1\11\2\0\5\11\2\0"+
    "\1\11\6\0\4\11\6\0\4\11\1\177\37\11\12\0"+
    "\1\11\2\0\5\11\2\0\1\11\6\0\4\11\6\0"+
    "\7\11\1\200\34\11\12\0\1\11\2\0\5\11\2\0"+
    "\1\11\6\0\4\11\6\0\13\11\1\201\30\11\12\0"+
    "\1\11\2\0\5\11\2\0\1\11\6\0\4\11\2\0"+
    "\56\107\1\202\1\203\31\107\57\110\1\204\1\202\30\110"+
    "\4\0\14\11\1\205\1\206\26\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\24\11\1\207"+
    "\17\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\3\11\1\210\40\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\23\11\1\211"+
    "\20\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\4\11\1\212\37\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\13\11\1\213"+
    "\30\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\16\11\1\214\25\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\25\11\1\215"+
    "\16\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\20\11\1\216\23\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\11\11\1\217"+
    "\32\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\31\11\1\220\12\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\10\11\1\221"+
    "\33\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\31\11\1\222\12\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\41\11\1\223"+
    "\2\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\50\0\2\224\107\0\2\225\16\0\4\225\23\0"+
    "\2\226\6\0\1\226\5\0\1\226\1\0\1\226\3\0"+
    "\1\227\1\226\14\0\2\226\12\0\1\226\1\230\2\0"+
    "\4\226\65\0\2\143\12\0\1\143\3\0\4\143\73\0"+
    "\1\36\16\0\1\134\73\0\1\231\36\0\1\137\3\0"+
    "\1\137\3\0\1\137\1\0\2\137\1\0\1\232\1\137"+
    "\7\0\1\233\13\0\2\234\6\0\1\235\2\137\5\0"+
    "\4\234\5\0\1\137\3\0\1\232\1\0\1\137\10\0"+
    "\1\236\35\0\1\236\2\0\2\143\12\0\1\143\3\0"+
    "\4\143\102\0\1\53\35\0\1\237\104\0\3\11\1\240"+
    "\40\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\50\0\2\241\12\0\1\241\3\0\4\241\65\0"+
    "\2\242\12\0\1\242\3\0\4\242\23\0\3\11\1\243"+
    "\40\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\23\11\1\244\20\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\16\11\1\245"+
    "\25\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\1\11\1\246\42\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\2\0\2\66\1\0"+
    "\106\66\2\67\1\0\106\67\4\0\1\11\1\247\42\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\11\11\1\250\32\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\1\174\43\11\12\0"+
    "\1\11\2\0\5\11\2\0\1\11\6\0\4\11\6\0"+
    "\7\11\1\251\34\11\12\0\1\11\2\0\5\11\2\0"+
    "\1\11\6\0\4\11\6\0\15\11\1\252\26\11\12\0"+
    "\1\11\2\0\5\11\2\0\1\11\6\0\4\11\6\0"+
    "\11\11\1\253\32\11\12\0\1\11\2\0\5\11\2\0"+
    "\1\11\6\0\4\11\6\0\7\11\1\254\34\11\12\0"+
    "\1\11\2\0\5\11\2\0\1\11\6\0\4\11\6\0"+
    "\16\11\1\255\25\11\12\0\1\11\2\0\5\11\2\0"+
    "\1\11\6\0\4\11\6\0\16\11\1\256\25\11\12\0"+
    "\1\11\2\0\5\11\2\0\1\11\6\0\4\11\6\0"+
    "\20\11\1\257\23\11\12\0\1\11\2\0\5\11\2\0"+
    "\1\11\6\0\4\11\6\0\23\11\1\260\20\11\12\0"+
    "\1\11\2\0\5\11\2\0\1\11\6\0\4\11\6\0"+
    "\15\11\1\261\26\11\12\0\1\11\2\0\5\11\2\0"+
    "\1\11\6\0\4\11\2\0\2\107\1\0\106\107\2\110"+
    "\1\0\106\110\4\0\1\11\1\262\42\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\1\11"+
    "\1\263\42\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\4\11\1\264\37\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\13\11"+
    "\1\265\30\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\13\11\1\266\7\11\1\267\20\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\20\11\1\270\23\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\7\11\1\271\34\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\15\11\1\272\26\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\12\11\1\273\31\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\13\11\1\274\30\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\32\11\1\275\11\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\43\11\1\276\12\0\1\11\2\0\3\11\1\277"+
    "\1\11\2\0\1\11\6\0\4\11\6\0\34\11\1\300"+
    "\7\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\43\11\1\276\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\2\301\6\0\1\301"+
    "\5\0\1\301\1\0\1\301\4\0\1\301\14\0\2\301"+
    "\12\0\1\301\1\0\1\302\1\0\4\301\1\302\22\0"+
    "\2\303\6\0\1\303\5\0\1\303\1\0\1\303\4\0"+
    "\1\303\14\0\2\303\12\0\1\303\3\0\4\303\23\0"+
    "\2\304\6\0\1\304\5\0\1\304\1\0\1\304\4\0"+
    "\1\304\4\0\1\304\4\0\1\304\2\0\2\304\12\0"+
    "\1\304\3\0\4\304\12\0\1\304\10\0\2\305\6\0"+
    "\1\305\5\0\1\305\1\0\1\305\4\0\1\305\4\0"+
    "\1\305\4\0\1\305\2\0\2\305\12\0\1\305\3\0"+
    "\4\305\12\0\1\305\52\0\2\306\6\0\1\231\7\0"+
    "\4\306\65\0\2\307\12\0\1\307\1\0\1\310\1\0"+
    "\4\307\1\310\32\0\1\311\100\0\11\11\1\312\32\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\60\0\1\313\4\0\1\314\6\0\1\315\76\0\1\313"+
    "\2\0\1\316\6\0\1\317\22\0\4\11\1\320\37\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\13\11\1\321\30\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\17\11\1\322\24\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\21\11\1\323\22\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\3\11\1\324\40\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\12\11\1\325\31\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\15\11\1\326\26\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\13\11\1\327\30\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\12\11\1\330\31\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\1\11\1\331\42\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\7\11\1\123\34\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\7\11\1\332\34\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\13\11\1\333\30\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\1\11\1\334\42\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\12\11\1\335\31\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\16\11\1\336\25\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\2\11\1\337\41\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\12\11\1\340\31\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\3\11\1\341\40\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\13\11\1\342\30\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\6\11\1\343\35\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\7\11\1\344\34\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\7\11\1\274\34\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\11\11\1\345\32\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\1\11\1\123\42\11"+
    "\12\0\1\11\2\0\5\11\2\0\1\11\6\0\4\11"+
    "\6\0\33\11\1\346\10\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\6\0\44\11\12\0\1\11"+
    "\2\0\2\11\1\347\2\11\2\0\1\11\6\0\4\11"+
    "\6\0\44\11\12\0\1\11\2\0\4\11\1\347\2\0"+
    "\1\11\6\0\4\11\6\0\35\11\1\350\6\11\12\0"+
    "\1\11\2\0\5\11\2\0\1\11\6\0\4\11\6\0"+
    "\2\301\6\0\1\301\5\0\1\301\1\0\1\301\4\0"+
    "\1\301\14\0\2\301\12\0\1\301\3\0\4\301\23\0"+
    "\2\303\6\0\1\303\5\0\1\303\1\0\1\303\3\0"+
    "\1\227\1\303\14\0\2\303\12\0\1\303\3\0\4\303"+
    "\23\0\2\351\6\0\1\351\5\0\1\351\1\0\1\351"+
    "\4\0\1\351\4\0\1\351\4\0\1\351\2\0\2\351"+
    "\6\0\1\231\3\0\1\351\3\0\4\351\12\0\1\351"+
    "\10\0\2\137\6\0\1\137\5\0\1\137\1\0\1\137"+
    "\4\0\1\137\4\0\1\137\4\0\1\137\2\0\2\137"+
    "\6\0\1\231\3\0\1\137\3\0\4\137\12\0\1\137"+
    "\52\0\2\137\6\0\1\231\7\0\4\137\65\0\2\307"+
    "\12\0\1\307\3\0\4\307\66\0\1\352\20\0\1\353"+
    "\24\0\4\11\1\354\37\11\12\0\1\11\2\0\5\11"+
    "\2\0\1\11\6\0\4\11\50\0\2\355\12\0\1\355"+
    "\3\0\4\355\17\0\56\315\1\313\32\315\46\0\2\356"+
    "\12\0\1\356\3\0\4\356\17\0\56\317\1\0\1\317"+
    "\1\357\30\317\4\0\14\11\1\360\27\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\11\11"+
    "\1\120\32\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\10\11\1\361\33\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\13\11"+
    "\1\362\30\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\25\11\1\363\16\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\16\11"+
    "\1\364\25\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\13\11\1\365\30\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\7\11"+
    "\1\366\34\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\3\11\1\367\40\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\4\11"+
    "\1\123\37\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\7\11\1\370\34\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\16\11"+
    "\1\371\25\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\4\11\1\372\37\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\34\11"+
    "\1\373\7\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\30\11\1\374\13\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\2\305"+
    "\6\0\1\305\5\0\1\305\1\0\1\305\4\0\1\305"+
    "\4\0\1\305\4\0\1\305\2\0\2\305\6\0\1\231"+
    "\3\0\1\305\3\0\4\305\12\0\1\305\73\0\1\375"+
    "\112\0\1\375\75\0\1\313\4\0\1\376\6\0\1\315"+
    "\76\0\1\313\2\0\1\377\6\0\1\317\22\0\24\11"+
    "\1\274\17\11\12\0\1\11\2\0\5\11\2\0\1\11"+
    "\6\0\4\11\6\0\1\11\1\u0100\42\11\12\0\1\11"+
    "\2\0\5\11\2\0\1\11\6\0\4\11\6\0\1\u0101"+
    "\43\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\16\11\1\u0102\25\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\14\11\1\u0103"+
    "\27\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\11\11\1\u0104\32\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\3\11\1\u0105"+
    "\40\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\20\11\1\u0106\23\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\15\11\1\u0107"+
    "\26\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\35\11\1\u0108\6\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\41\11\1\u0109"+
    "\2\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\50\0\2\u010a\12\0\1\u010a\3\0\4\u010a\65\0"+
    "\2\u010b\12\0\1\u010b\3\0\4\u010b\23\0\7\11\1\u010c"+
    "\34\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\7\11\1\255\34\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\4\11\1\u010d"+
    "\37\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\16\11\1\u010e\25\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\13\11\1\u010f"+
    "\30\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\1\11\1\u0110\42\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\36\11\1\u0111"+
    "\5\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\60\0\1\313\13\0\1\315\76\0\1\313\11\0"+
    "\1\317\22\0\1\11\1\u0112\42\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\6\0\23\11\1\u0113"+
    "\20\11\12\0\1\11\2\0\5\11\2\0\1\11\6\0"+
    "\4\11\6\0\37\11\1\u0109\4\11\12\0\1\11\2\0"+
    "\5\11\2\0\1\11\6\0\4\11\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16133];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\1\11\17\1\1\11\1\1\1\11"+
    "\2\1\2\11\4\1\2\0\17\1\2\0\17\1\4\0"+
    "\1\11\1\1\1\11\3\0\1\11\1\1\1\11\1\0"+
    "\1\11\1\0\1\1\1\11\1\1\2\0\4\1\1\11"+
    "\2\0\16\1\1\11\2\0\22\1\2\0\1\11\3\0"+
    "\1\1\2\0\1\1\2\0\37\1\5\0\1\1\1\0"+
    "\2\1\1\11\4\0\31\1\3\0\1\1\2\0\16\1"+
    "\1\11\2\0\12\1\2\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _JuliaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JuliaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { return HEX_FLOAT;
          }
        case 58: break;
        case 16: 
          { return IF;
          }
        case 59: break;
        case 53: 
          { return FUNCTION;
          }
        case 60: break;
        case 22: 
          { return OFTYPE;
          }
        case 61: break;
        case 45: 
          { return MACRO;
          }
        case 62: break;
        case 31: 
          { return HEX_INTEGER;
          }
        case 63: break;
        case 8: 
          { return ARITHMETIC_OPERATOR;
          }
        case 64: break;
        case 15: 
          { return SEMICOLON;
          }
        case 65: break;
        case 24: 
          { return END;
          }
        case 66: break;
        case 5: 
          { return INTEGER;
          }
        case 67: break;
        case 48: 
          { return EXPORT;
          }
        case 68: break;
        case 29: 
          { return BINARY_INTEGER;
          }
        case 69: break;
        case 44: 
          { return CCALL;
          }
        case 70: break;
        case 36: 
          { return VERSION;
          }
        case 71: break;
        case 21: 
          { return ADD_ASGN;
          }
        case 72: break;
//        case 3:
//          { return SPACE;
//          }
        case 73: break;
        case 56: 
          { return IMMUTABLE;
          }
        case 74: break;
        case 17: 
          { return KEYWORD;
          }
        case 75: break;
        case 6: 
          { return BITWISE_OPERATOR;
          }
        case 76: break;
        case 40: 
          { return FALSE;
          }
        case 77: break;
        case 37: 
          { return BEGIN;
          }
        case 78: break;
        case 10: 
          { return OTHER_OPERATOR;
          }
        case 79: break;
        case 14: 
          { return COMMA;
          }
        case 80: break;
        case 55: 
          { return CONTINUE;
          }
        case 81: break;
        case 23: 
          { return BYTE_ARRAY;
          }
        case 82: break;
        case 9: 
          { return COMMENT;
          }
        case 83: break;
        case 30: 
          { return OCTAL_INTEGER;
          }
        case 84: break;
        case 12: 
          { return COLON;
          }
        case 85: break;
        case 32: 
          { return CHAR;
          }
        case 86: break;
        case 49: 
          { return IMPORT;
          }
        case 87: break;
        case 50: 
          { return INCLUDE;
          }
        case 88: break;
        case 52: 
          { return PREDEFINED_VALUE;
          }
        case 89: break;
        case 20: 
          { return ELMNT_OPERATOR;
          }
        case 90: break;
        case 57: 
          { return TYPEALIAS;
          }
        case 91: break;
        case 47: 
          { return ELSEIF;
          }
        case 92: break;
        case 4: 
          { return ID;
          }
        case 93: break;
        case 13: 
          { return BRACKETS;
          }
        case 94: break;
        case 33: 
          { return ELSE;
          }
        case 95: break;
        case 19: 
          { return FLOAT;
          }
        case 96: break;
        case 39: 
          { return WHILE;
          }
        case 97: break;
        case 26: 
          { return REGEX;
          }
        case 98: break;
        case 46: 
          { return UNION;
          }
        case 99: break;
        case 41: 
          { return USING;
          }
        case 100: break;
        case 18: 
          { return STRING;
          }
        case 101: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 102: break;
        case 34: 
          { return TRUE;
          }
        case 103: break;
        case 25: 
          { return FOR;
          }
        case 104: break;
        case 38: 
          { return BREAK;
          }
        case 105: break;
        case 7: 
          { return RELATIONAL_OPERATOR;
          }
        case 106: break;
        case 51: 
          { return FINALLY;
          }
        case 107: break;
        case 42: 
          { return CONST;
          }
        case 108: break;
        case 54: 
          { return ABSTRACT;
          }
        case 109: break;
        case 11: 
          { return UPDATE_OPERATOR;
          }
        case 110: break;
        case 43: 
          { return CATCH;
          }
        case 111: break;
        case 28: 
          { return PREDEFINED_FLOAT;
          }
        case 112: break;
        case 27: 
          { return TRY;
          }
        case 113: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 114: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
