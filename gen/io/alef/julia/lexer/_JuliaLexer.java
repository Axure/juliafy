/* The following code was generated by JFlex 1.4.3 on 4/4/15 8:17 AM */

package io.alef.julia.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static io.alef.julia.psi.JuliaTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/4/15 8:17 AM from the specification file
 * <tt>/Users/snefru/repository/julia/gen/io/alef/julia/lexer/_JuliaLexer.flex</tt>
 */
public class _JuliaLexer implements FlexLexer {
    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\1\1\2\1\0\1\1\1\1\22\0\1\1\1\73\1\57" +
                    "\1\60\1\52\1\75\1\50\1\55\1\101\1\101\1\74\1\63\1\106" +
                    "\1\71\1\62\1\75\1\45\1\46\1\70\1\67\2\65\1\66\1\65" +
                    "\2\61\1\77\1\107\1\54\1\72\1\53\1\76\1\100\3\103\1\35" +
                    "\1\42\1\103\2\105\1\40\4\105\1\44\1\33\2\105\1\34\1\37" +
                    "\1\105\1\102\1\43\1\32\1\64\1\105\1\41\1\101\1\56\1\101" +
                    "\1\75\1\36\1\0\1\21\1\3\1\23\1\30\1\4\1\13\1\5" +
                    "\1\11\1\6\1\105\1\22\1\12\1\24\1\7\1\14\1\27\1\25" +
                    "\1\15\1\26\1\16\1\20\1\104\1\10\1\31\1\17\1\105\1\101" +
                    "\1\51\1\101\1\47\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\24\3\2\4\4\5\2\6\1\1" +
                    "\1\7\1\1\1\10\1\11\2\7\1\12\1\11\1\1" +
                    "\1\11\1\13\1\14\2\3\1\15\1\16\4\3\2\0" +
                    "\5\3\1\17\11\3\2\0\12\3\1\20\4\3\4\0" +
                    "\1\12\1\5\1\6\3\0\1\21\1\22\1\23\1\0" +
                    "\1\24\1\0\1\6\1\25\1\3\2\0\4\3\1\26" +
                    "\2\0\1\27\11\3\1\30\3\3\1\31\2\0\1\32" +
                    "\13\3\1\33\1\3\1\33\1\34\1\35\1\36\2\0" +
                    "\1\37\3\0\1\37\2\0\1\3\2\0\4\3\1\40" +
                    "\12\3\1\41\1\20\15\3\1\42\5\0\1\22\1\0" +
                    "\1\33\1\3\1\43\4\0\1\44\1\3\1\45\6\3" +
                    "\1\46\2\3\1\47\2\3\1\50\2\3\1\51\1\52" +
                    "\1\53\1\54\1\3\1\33\1\3\3\0\1\55\2\0" +
                    "\1\43\1\3\1\56\1\57\2\3\1\60\7\3\1\33" +
                    "\2\0\1\61\2\3\1\62\5\3\1\63\2\0\1\3" +
                    "\1\64\1\3\1\65\1\66\1\3\1\67\1\70";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8" +
                    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438" +
                    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678" +
                    "\0\u06c0\0\110\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870" +
                    "\0\u0798\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68" +
                    "\0\u0798\0\110\0\u0ab0\0\110\0\u0af8\0\u0b40\0\110\0\110" +
                    "\0\u0b88\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80" +
                    "\0\u0dc8\0\u0e10\0\u0e58\0\u01f8\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78" +
                    "\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8" +
                    "\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8" +
                    "\0\u1440\0\u01f8\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0" +
                    "\0\u1638\0\u1680\0\110\0\u16c8\0\110\0\u1710\0\u1758\0\u08b8" +
                    "\0\110\0\u17a0\0\110\0\u17e8\0\110\0\u1830\0\u0a68\0\110" +
                    "\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28\0\110" +
                    "\0\u1a70\0\u1ab8\0\u01f8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20" +
                    "\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u01f8\0\u1d88\0\u1dd0\0\u1e18" +
                    "\0\110\0\u1e60\0\u1ea8\0\u01f8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8" +
                    "\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u2208" +
                    "\0\u2250\0\u2298\0\u15a8\0\u15f0\0\u1638\0\u22e0\0\u2328\0\110" +
                    "\0\u2370\0\u23b8\0\u2400\0\u1710\0\u2448\0\u2490\0\u24d8\0\u2520" +
                    "\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760" +
                    "\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\u29a0" +
                    "\0\u01f8\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98" +
                    "\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8" +
                    "\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40\0\u2f40\0\u2f88" +
                    "\0\u2fd0\0\110\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u01f8\0\u3138" +
                    "\0\u01f8\0\u3180\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u01f8" +
                    "\0\u3330\0\u3378\0\u01f8\0\u33c0\0\u3408\0\u01f8\0\u3450\0\u3498" +
                    "\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u34e0\0\u01f8\0\u3528\0\u3570" +
                    "\0\u35b8\0\u3600\0\u01f8\0\u3648\0\u3690\0\u30f0\0\u36d8\0\u01f8" +
                    "\0\u01f8\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888\0\u38d0" +
                    "\0\u3918\0\u3960\0\u39a8\0\110\0\u39f0\0\u3a38\0\u01f8\0\u3a80" +
                    "\0\u3ac8\0\u01f8\0\u3b10\0\u3b58\0\u3ba0\0\u3be8\0\u3c30\0\u01f8" +
                    "\0\u3c78\0\u3cc0\0\u3d08\0\u01f8\0\u3d50\0\u01f8\0\u01f8\0\u3d98" +
                    "\0\u01f8\0\u01f8";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\10\1\12\1\13\1\10\1\14\1\15\1\10\1\16" +
                    "\1\17\1\10\1\20\1\21\1\22\2\10\1\23\1\10" +
                    "\1\24\5\10\1\25\2\10\1\26\1\27\1\30\1\31" +
                    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\1\31\1\44\1\45\1\10\4\31\1\46" +
                    "\1\47\1\50\1\41\1\51\1\52\1\53\1\52\1\54" +
                    "\1\55\1\10\1\56\1\10\1\57\1\60\111\0\2\3" +
                    "\110\0\1\10\1\61\1\10\1\62\6\10\1\63\3\10" +
                    "\1\64\25\10\6\0\1\65\1\0\1\66\1\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\4\10" +
                    "\1\67\2\10\1\70\16\10\1\71\15\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\7\10" +
                    "\1\72\34\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\4\10\1\73\3\10\1\74\10\10" +
                    "\1\75\22\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\44\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\6\10\1\76\35\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\1\10\1\77\7\10\1\100\32\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\3\10" +
                    "\1\101\5\10\1\102\3\10\1\103\1\104\25\10\12\0" +
                    "\1\10\2\0\5\10\2\0\1\10\6\0\4\10\5\0" +
                    "\1\10\1\105\42\10\6\0\1\106\1\0\1\107\1\0" +
                    "\1\10\2\0\5\10\2\0\1\10\6\0\4\10\5\0" +
                    "\12\10\1\110\1\10\1\111\27\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\23\10\1\112" +
                    "\20\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\1\113\43\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\11\10\1\114\4\10" +
                    "\1\115\1\10\1\116\23\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\11\10\1\117\4\10" +
                    "\1\120\25\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\15\10\1\121\26\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\11\10" +
                    "\1\122\32\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\30\10\1\123\13\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\4\10" +
                    "\1\124\37\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\37\10\1\125\4\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\16\10" +
                    "\1\126\25\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\1\127\10\0\1\130\14\0\1\131" +
                    "\13\0\2\31\12\0\1\31\1\132\1\0\1\131\4\31" +
                    "\64\0\2\31\12\0\1\31\1\132\2\0\4\31\67\0" +
                    "\1\52\21\0\1\133\66\0\1\52\130\0\1\133\70\0" +
                    "\1\134\16\0\1\135\71\0\1\35\15\0\1\135\15\0" +
                    "\2\136\1\0\53\136\1\137\31\136\57\140\1\141\30\140" +
                    "\2\43\1\0\105\43\45\0\2\142\7\0\1\143\2\0" +
                    "\1\142\1\144\1\143\1\0\4\142\1\143\2\0\1\143" +
                    "\105\0\1\145\55\0\1\146\12\0\1\52\16\0\1\133" +
                    "\107\0\1\147\107\0\1\135\114\0\1\150\13\0\4\10" +
                    "\1\151\37\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\44\10\6\0\1\152\1\0\1\153" +
                    "\1\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\2\10\1\154\41\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\13\10\1\155\30\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\1\10\1\156\42\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\12\10\1\157\31\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\2\0\55\65\1\160\1\161\31\65\56\66\1\162\1\160" +
                    "\30\66\3\0\25\10\1\163\16\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\23\10\1\164" +
                    "\20\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\24\10\1\165\17\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\11\10\1\166" +
                    "\32\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\20\10\1\167\23\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\21\10\1\170" +
                    "\2\10\1\171\17\10\12\0\1\10\2\0\5\10\2\0" +
                    "\1\10\6\0\4\10\5\0\3\10\1\172\40\10\12\0" +
                    "\1\10\2\0\5\10\2\0\1\10\6\0\4\10\5\0" +
                    "\13\10\1\122\30\10\12\0\1\10\2\0\5\10\2\0" +
                    "\1\10\6\0\4\10\5\0\20\10\1\173\23\10\12\0" +
                    "\1\10\2\0\5\10\2\0\1\10\6\0\4\10\5\0" +
                    "\4\10\1\174\37\10\12\0\1\10\2\0\5\10\2\0" +
                    "\1\10\6\0\4\10\5\0\12\10\1\175\31\10\12\0" +
                    "\1\10\2\0\5\10\2\0\1\10\6\0\4\10\5\0" +
                    "\4\10\1\176\37\10\12\0\1\10\2\0\5\10\2\0" +
                    "\1\10\6\0\4\10\5\0\7\10\1\177\34\10\12\0" +
                    "\1\10\2\0\5\10\2\0\1\10\6\0\4\10\5\0" +
                    "\13\10\1\200\30\10\12\0\1\10\2\0\5\10\2\0" +
                    "\1\10\6\0\4\10\2\0\55\106\1\201\1\202\31\106" +
                    "\56\107\1\203\1\201\30\107\3\0\14\10\1\204\1\205" +
                    "\26\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\24\10\1\206\17\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\3\10\1\207" +
                    "\40\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\23\10\1\210\20\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\4\10\1\211" +
                    "\37\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\13\10\1\212\30\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\16\10\1\213" +
                    "\25\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\25\10\1\214\16\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\20\10\1\215" +
                    "\23\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\11\10\1\216\32\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\31\10\1\217" +
                    "\12\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\10\10\1\220\33\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\31\10\1\221" +
                    "\12\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\41\10\1\222\2\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\47\0\2\223\106\0" +
                    "\2\224\16\0\4\224\22\0\2\225\6\0\1\225\5\0" +
                    "\1\225\1\0\1\225\3\0\1\226\1\225\14\0\2\225" +
                    "\12\0\1\225\1\227\2\0\4\225\64\0\2\142\12\0" +
                    "\1\142\3\0\4\142\72\0\1\35\16\0\1\133\72\0" +
                    "\1\230\35\0\1\136\3\0\1\136\3\0\1\136\1\0" +
                    "\2\136\1\0\1\231\1\136\7\0\1\232\13\0\2\233" +
                    "\6\0\1\234\2\136\5\0\4\233\5\0\1\136\3\0" +
                    "\1\231\1\0\1\136\7\0\1\235\35\0\1\235\2\0" +
                    "\2\142\12\0\1\142\3\0\4\142\101\0\1\52\34\0" +
                    "\1\236\103\0\3\10\1\237\40\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\47\0\2\240\12\0" +
                    "\1\240\3\0\4\240\64\0\2\241\12\0\1\241\3\0" +
                    "\4\241\22\0\3\10\1\242\40\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\23\10\1\243" +
                    "\20\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\16\10\1\244\25\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\1\10\1\245" +
                    "\42\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\2\0\2\65\1\0\105\65\2\66\1\0\105\66" +
                    "\3\0\1\10\1\246\42\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\11\10\1\247\32\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\1\173\43\10\12\0\1\10\2\0\5\10\2\0" +
                    "\1\10\6\0\4\10\5\0\7\10\1\250\34\10\12\0" +
                    "\1\10\2\0\5\10\2\0\1\10\6\0\4\10\5\0" +
                    "\15\10\1\251\26\10\12\0\1\10\2\0\5\10\2\0" +
                    "\1\10\6\0\4\10\5\0\11\10\1\252\32\10\12\0" +
                    "\1\10\2\0\5\10\2\0\1\10\6\0\4\10\5\0" +
                    "\7\10\1\253\34\10\12\0\1\10\2\0\5\10\2\0" +
                    "\1\10\6\0\4\10\5\0\16\10\1\254\25\10\12\0" +
                    "\1\10\2\0\5\10\2\0\1\10\6\0\4\10\5\0" +
                    "\16\10\1\255\25\10\12\0\1\10\2\0\5\10\2\0" +
                    "\1\10\6\0\4\10\5\0\20\10\1\256\23\10\12\0" +
                    "\1\10\2\0\5\10\2\0\1\10\6\0\4\10\5\0" +
                    "\23\10\1\257\20\10\12\0\1\10\2\0\5\10\2\0" +
                    "\1\10\6\0\4\10\5\0\15\10\1\260\26\10\12\0" +
                    "\1\10\2\0\5\10\2\0\1\10\6\0\4\10\2\0" +
                    "\2\106\1\0\105\106\2\107\1\0\105\107\3\0\1\10" +
                    "\1\261\42\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\1\10\1\262\42\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\4\10" +
                    "\1\263\37\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\13\10\1\264\30\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\13\10" +
                    "\1\265\7\10\1\266\20\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\20\10\1\267\23\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\7\10\1\270\34\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\15\10\1\271\26\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\12\10\1\272\31\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\13\10\1\273\30\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\32\10\1\274\11\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\43\10\1\275\12\0" +
                    "\1\10\2\0\3\10\1\276\1\10\2\0\1\10\6\0" +
                    "\4\10\5\0\34\10\1\277\7\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\43\10\1\275" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\2\300\6\0\1\300\5\0\1\300\1\0\1\300" +
                    "\4\0\1\300\14\0\2\300\12\0\1\300\1\0\1\301" +
                    "\1\0\4\300\1\301\21\0\2\302\6\0\1\302\5\0" +
                    "\1\302\1\0\1\302\4\0\1\302\14\0\2\302\12\0" +
                    "\1\302\3\0\4\302\22\0\2\303\6\0\1\303\5\0" +
                    "\1\303\1\0\1\303\4\0\1\303\4\0\1\303\4\0" +
                    "\1\303\2\0\2\303\12\0\1\303\3\0\4\303\12\0" +
                    "\1\303\7\0\2\304\6\0\1\304\5\0\1\304\1\0" +
                    "\1\304\4\0\1\304\4\0\1\304\4\0\1\304\2\0" +
                    "\2\304\12\0\1\304\3\0\4\304\12\0\1\304\51\0" +
                    "\2\305\6\0\1\230\7\0\4\305\64\0\2\306\12\0" +
                    "\1\306\1\0\1\307\1\0\4\306\1\307\31\0\1\310" +
                    "\77\0\11\10\1\311\32\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\57\0\1\312\4\0\1\313" +
                    "\6\0\1\314\75\0\1\312\2\0\1\315\6\0\1\316" +
                    "\21\0\4\10\1\317\37\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\13\10\1\320\30\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\17\10\1\321\24\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\21\10\1\322\22\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\3\10\1\323\40\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\12\10\1\324\31\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\15\10\1\325\26\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\13\10\1\326\30\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\12\10\1\327\31\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\1\10\1\330\42\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\7\10\1\122\34\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\7\10\1\331\34\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\13\10\1\332\30\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\1\10\1\333\42\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\12\10\1\334\31\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\16\10\1\335\25\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\2\10\1\336\41\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\12\10\1\337\31\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\3\10\1\340\40\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\13\10\1\341\30\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\6\10\1\342\35\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\7\10\1\343\34\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\7\10\1\273\34\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\11\10\1\344\32\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\1\10\1\122\42\10\12\0\1\10\2\0\5\10" +
                    "\2\0\1\10\6\0\4\10\5\0\33\10\1\345\10\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\5\0\44\10\12\0\1\10\2\0\2\10\1\346\2\10" +
                    "\2\0\1\10\6\0\4\10\5\0\44\10\12\0\1\10" +
                    "\2\0\4\10\1\346\2\0\1\10\6\0\4\10\5\0" +
                    "\35\10\1\347\6\10\12\0\1\10\2\0\5\10\2\0" +
                    "\1\10\6\0\4\10\5\0\2\300\6\0\1\300\5\0" +
                    "\1\300\1\0\1\300\4\0\1\300\14\0\2\300\12\0" +
                    "\1\300\3\0\4\300\22\0\2\302\6\0\1\302\5\0" +
                    "\1\302\1\0\1\302\3\0\1\226\1\302\14\0\2\302" +
                    "\12\0\1\302\3\0\4\302\22\0\2\350\6\0\1\350" +
                    "\5\0\1\350\1\0\1\350\4\0\1\350\4\0\1\350" +
                    "\4\0\1\350\2\0\2\350\6\0\1\230\3\0\1\350" +
                    "\3\0\4\350\12\0\1\350\7\0\2\136\6\0\1\136" +
                    "\5\0\1\136\1\0\1\136\4\0\1\136\4\0\1\136" +
                    "\4\0\1\136\2\0\2\136\6\0\1\230\3\0\1\136" +
                    "\3\0\4\136\12\0\1\136\51\0\2\136\6\0\1\230" +
                    "\7\0\4\136\64\0\2\306\12\0\1\306\3\0\4\306" +
                    "\65\0\1\351\20\0\1\352\23\0\4\10\1\353\37\10" +
                    "\12\0\1\10\2\0\5\10\2\0\1\10\6\0\4\10" +
                    "\47\0\2\354\12\0\1\354\3\0\4\354\17\0\55\314" +
                    "\1\312\32\314\45\0\2\355\12\0\1\355\3\0\4\355" +
                    "\17\0\55\316\1\0\1\316\1\356\30\316\3\0\14\10" +
                    "\1\357\27\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\11\10\1\117\32\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\10\10" +
                    "\1\360\33\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\13\10\1\361\30\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\25\10" +
                    "\1\362\16\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\16\10\1\363\25\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\13\10" +
                    "\1\364\30\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\7\10\1\365\34\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\3\10" +
                    "\1\366\40\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\4\10\1\122\37\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\7\10" +
                    "\1\367\34\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\16\10\1\370\25\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\4\10" +
                    "\1\371\37\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\34\10\1\372\7\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\30\10" +
                    "\1\373\13\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\2\304\6\0\1\304\5\0\1\304" +
                    "\1\0\1\304\4\0\1\304\4\0\1\304\4\0\1\304" +
                    "\2\0\2\304\6\0\1\230\3\0\1\304\3\0\4\304" +
                    "\12\0\1\304\72\0\1\374\111\0\1\374\74\0\1\312" +
                    "\4\0\1\375\6\0\1\314\75\0\1\312\2\0\1\376" +
                    "\6\0\1\316\21\0\24\10\1\273\17\10\12\0\1\10" +
                    "\2\0\5\10\2\0\1\10\6\0\4\10\5\0\1\10" +
                    "\1\377\42\10\12\0\1\10\2\0\5\10\2\0\1\10" +
                    "\6\0\4\10\5\0\1\u0100\43\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\16\10\1\u0101" +
                    "\25\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\14\10\1\u0102\27\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\11\10\1\u0103" +
                    "\32\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\3\10\1\u0104\40\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\20\10\1\u0105" +
                    "\23\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\15\10\1\u0106\26\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\35\10\1\u0107" +
                    "\6\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\41\10\1\u0108\2\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\47\0\2\u0109\12\0" +
                    "\1\u0109\3\0\4\u0109\64\0\2\u010a\12\0\1\u010a\3\0" +
                    "\4\u010a\22\0\7\10\1\u010b\34\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\7\10\1\254" +
                    "\34\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\4\10\1\u010c\37\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\16\10\1\u010d" +
                    "\25\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\13\10\1\u010e\30\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\1\10\1\u010f" +
                    "\42\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\36\10\1\u0110\5\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\57\0\1\312\13\0" +
                    "\1\314\75\0\1\312\11\0\1\316\21\0\1\10\1\u0111" +
                    "\42\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\5\0\23\10\1\u0112\20\10\12\0\1\10\2\0" +
                    "\5\10\2\0\1\10\6\0\4\10\5\0\37\10\1\u0108" +
                    "\4\10\12\0\1\10\2\0\5\10\2\0\1\10\6\0" +
                    "\4\10\2\0";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final char[] EMPTY_BUFFER = new char[0];
    private static final int YYEOF = -1;
    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\27\1\1\11\17\1\1\11\1\1\1\11" +
                    "\2\1\2\11\4\1\2\0\17\1\2\0\17\1\4\0" +
                    "\1\11\1\1\1\11\3\0\1\11\1\1\1\11\1\0" +
                    "\1\11\1\0\1\1\1\11\1\1\2\0\4\1\1\11" +
                    "\2\0\16\1\1\11\2\0\22\1\2\0\1\11\3\0" +
                    "\1\1\2\0\1\1\2\0\37\1\5\0\1\1\1\0" +
                    "\2\1\1\11\4\0\31\1\3\0\1\1\2\0\16\1" +
                    "\1\11\2\0\12\1\2\0\10\1";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    private static java.io.Reader zzReader = null; // Fake
    /**
     * the current state of the DFA
     */
    private int zzState;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";
    /**
     * this buffer may contains the current text array to be matched when it is cheap to acquire it
     */
    private char[] zzBufferArray;
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /* user code: */
    public _JuliaLexer() {
        this((java.io.Reader) null);
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _JuliaLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[274];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[274];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[15840];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[274];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 188) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzPushbackPos = 0;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p/>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p/>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p/>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p/>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;
        char[] zzBufferArrayL = zzBufferArray;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 34: {
                    return HEX_FLOAT;
                }
                case 57:
                    break;
                case 15: {
                    return IF;
                }
                case 58:
                    break;
                case 52: {
                    return FUNCTION;
                }
                case 59:
                    break;
                case 21: {
                    return OFTYPE;
                }
                case 60:
                    break;
                case 44: {
                    return MACRO;
                }
                case 61:
                    break;
                case 30: {
                    return HEX_INTEGER;
                }
                case 62:
                    break;
                case 7: {
                    return ARITHMETIC_OPERATOR;
                }
                case 63:
                    break;
                case 14: {
                    return SEMICOLON;
                }
                case 64:
                    break;
                case 23: {
                    return END;
                }
                case 65:
                    break;
                case 4: {
                    return INTEGER;
                }
                case 66:
                    break;
                case 47: {
                    return EXPORT;
                }
                case 67:
                    break;
                case 28: {
                    return BINARY_INTEGER;
                }
                case 68:
                    break;
                case 43: {
                    return CCALL;
                }
                case 69:
                    break;
                case 35: {
                    return VERSION;
                }
                case 70:
                    break;
                case 20: {
                    return ADD_ASGN;
                }
                case 71:
                    break;
                case 55: {
                    return IMMUTABLE;
                }
                case 72:
                    break;
                case 16: {
                    return KEYWORD;
                }
                case 73:
                    break;
                case 5: {
                    return BITWISE_OPERATOR;
                }
                case 74:
                    break;
                case 39: {
                    return FALSE;
                }
                case 75:
                    break;
                case 36: {
                    return BEGIN;
                }
                case 76:
                    break;
                case 9: {
                    return OTHER_OPERATOR;
                }
                case 77:
                    break;
                case 13: {
                    return COMMA;
                }
                case 78:
                    break;
                case 54: {
                    return CONTINUE;
                }
                case 79:
                    break;
                case 22: {
                    return BYTE_ARRAY;
                }
                case 80:
                    break;
                case 8: {
                    return COMMENT;
                }
                case 81:
                    break;
                case 29: {
                    return OCTAL_INTEGER;
                }
                case 82:
                    break;
                case 11: {
                    return COLON;
                }
                case 83:
                    break;
                case 31: {
                    return CHAR;
                }
                case 84:
                    break;
                case 48: {
                    return IMPORT;
                }
                case 85:
                    break;
                case 49: {
                    return INCLUDE;
                }
                case 86:
                    break;
                case 51: {
                    return PREDEFINED_VALUE;
                }
                case 87:
                    break;
                case 19: {
                    return ELMNT_OPERATOR;
                }
                case 88:
                    break;
                case 56: {
                    return TYPEALIAS;
                }
                case 89:
                    break;
                case 46: {
                    return ELSEIF;
                }
                case 90:
                    break;
                case 3: {
                    return ID;
                }
                case 91:
                    break;
                case 12: {
                    return BRACKETS;
                }
                case 92:
                    break;
                case 32: {
                    return ELSE;
                }
                case 93:
                    break;
                case 18: {
                    return FLOAT;
                }
                case 94:
                    break;
                case 38: {
                    return WHILE;
                }
                case 95:
                    break;
                case 25: {
                    return REGEX;
                }
                case 96:
                    break;
                case 45: {
                    return UNION;
                }
                case 97:
                    break;
                case 40: {
                    return USING;
                }
                case 98:
                    break;
                case 17: {
                    return STRING;
                }
                case 99:
                    break;
                case 2: {
                    return com.intellij.psi.TokenType.WHITE_SPACE;
                }
                case 100:
                    break;
                case 33: {
                    return TRUE;
                }
                case 101:
                    break;
                case 24: {
                    return FOR;
                }
                case 102:
                    break;
                case 37: {
                    return BREAK;
                }
                case 103:
                    break;
                case 6: {
                    return RELATIONAL_OPERATOR;
                }
                case 104:
                    break;
                case 50: {
                    return FINALLY;
                }
                case 105:
                    break;
                case 41: {
                    return CONST;
                }
                case 106:
                    break;
                case 53: {
                    return ABSTRACT;
                }
                case 107:
                    break;
                case 10: {
                    return UPDATE_OPERATOR;
                }
                case 108:
                    break;
                case 42: {
                    return CATCH;
                }
                case 109:
                    break;
                case 27: {
                    return PREDEFINED_FLOAT;
                }
                case 110:
                    break;
                case 26: {
                    return TRY;
                }
                case 111:
                    break;
                case 1: {
                    return com.intellij.psi.TokenType.BAD_CHARACTER;
                }
                case 112:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        return null;
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
